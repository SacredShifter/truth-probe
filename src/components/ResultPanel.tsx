import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { DistortionFlagCard } from './DistortionFlagCard';
import { Download, ChevronDown, Shield, AlertTriangle } from 'lucide-react';
import { useState } from 'react';

interface DistortionFlag {
  type: string;
  severity: 'LOW' | 'MEDIUM' | 'HIGH';
  description: string;
}

interface AuditResult {
  resonance_score: number;
  distortion_flags: DistortionFlag[];
  truth_alignment: string;
  analysis_report: string;
}

interface ResultPanelProps {
  result: AuditResult;
  originalText: string;
}

const getResonanceColor = (score: number) => {
  if (score >= 0.8) return 'text-green-400';
  if (score >= 0.6) return 'text-yellow-400';
  if (score >= 0.4) return 'text-orange-400';
  return 'text-red-400';
};

const getResonanceLabel = (score: number) => {
  if (score >= 0.9) return 'PURE TRUTH RESONANCE';
  if (score >= 0.7) return 'HIGH TRUTH RESONANCE';
  if (score >= 0.5) return 'MIXED SIGNALS DETECTED';
  if (score >= 0.3) return 'DISTORTION PRESENT';
  return 'HIGH DISTORTION';
};

const getProgressColor = (score: number) => {
  if (score >= 0.8) return 'bg-green-500';
  if (score >= 0.6) return 'bg-yellow-500';
  if (score >= 0.4) return 'bg-orange-500';
  return 'bg-red-500';
};

export const ResultPanel = ({ result, originalText }: ResultPanelProps) => {
  const [reportOpen, setReportOpen] = useState(false);
  
  const handleExportPDF = () => {
    const content = `
VALEION AUDIT REPORT
====================================

RESONANCE SCORE: ${result.resonance_score.toFixed(2)} - ${getResonanceLabel(result.resonance_score)}

ORIGINAL TEXT:
${originalText}

DISTORTION FLAGS:
${result.distortion_flags.map(flag => 
  `â€¢ ${flag.type} (${flag.severity.toUpperCase()}): ${flag.description}`
).join('\n')}

TRUTH ALIGNMENT:
${result.truth_alignment}

ANALYSIS REPORT:
${result.analysis_report}

====================================
Generated by Valeion Sovereignty Engine
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `valeion-audit-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6">
      {/* Resonance Score Dial */}
      <Card className="bg-background border-border">
        <CardHeader className="text-center">
          <CardTitle className="text-foreground font-mono flex items-center justify-center gap-2">
            <Shield className="w-5 h-5" />
            RESONANCE ANALYSIS
          </CardTitle>
        </CardHeader>
        <CardContent className="text-center space-y-4">
          {/* Circular Progress Dial */}
          <div className="relative w-32 h-32 mx-auto">
            <svg className="w-32 h-32 transform -rotate-90" viewBox="0 0 100 100">
              {/* Background circle */}
              <circle
                cx="50"
                cy="50"
                r="40"
                stroke="hsl(var(--muted))"
                strokeWidth="8"
                fill="none"
              />
              {/* Progress circle */}
              <circle
                cx="50"
                cy="50"
                r="40"
                stroke={result.resonance_score >= 0.8 ? '#22c55e' : 
                       result.resonance_score >= 0.6 ? '#eab308' :
                       result.resonance_score >= 0.4 ? '#f97316' : '#ef4444'}
                strokeWidth="8"
                fill="none"
                strokeDasharray={`${result.resonance_score * 251.32}, 251.32`}
                strokeLinecap="round"
                className="transition-all duration-1000 ease-out"
              />
            </svg>
            {/* Score text overlay */}
            <div className="absolute inset-0 flex items-center justify-center">
              <div className={`text-2xl font-mono font-bold ${getResonanceColor(result.resonance_score)}`}>
                {(result.resonance_score * 100).toFixed(0)}%
              </div>
            </div>
          </div>
          
          {/* Progress bar alternative */}
          <div className="space-y-2">
            <div className="flex justify-between text-sm font-mono">
              <span>Truth Resonance</span>
              <span className={getResonanceColor(result.resonance_score)}>
                {result.resonance_score.toFixed(2)}
              </span>
            </div>
            <Progress 
              value={result.resonance_score * 100} 
              className="h-3"
            />
          </div>
          
          <div className={`text-lg font-mono mt-2 ${getResonanceColor(result.resonance_score)}`}>
            {getResonanceLabel(result.resonance_score)}
          </div>
        </CardContent>
      </Card>

      {/* Distortion Flags with Severity Badges */}
      {result.distortion_flags.length > 0 && (
        <Card className="bg-background border-border">
          <CardHeader>
            <CardTitle className="text-foreground font-mono flex items-center gap-2">
              <AlertTriangle className="w-5 h-5 text-red-400" />
              DISTORTION SIGNATURES
              <span className="ml-auto bg-red-500/20 text-red-300 px-2 py-1 rounded text-sm">
                {result.distortion_flags.length} DETECTED
              </span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {result.distortion_flags.map((flag, index) => (
                <DistortionFlagCard key={index} flag={flag} />
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Truth Alignment */}
      <Card className="bg-background border-border">
        <CardHeader>
          <CardTitle className="text-foreground font-mono flex items-center gap-2">
            <Shield className="w-5 h-5 text-green-400" />
            TRUTH ALIGNMENT
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-green-500/10 border border-green-500/20 p-4 rounded-lg">
            <p className="text-green-100 font-mono leading-relaxed whitespace-pre-wrap">
              {result.truth_alignment}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Collapsible Analysis Report */}
      <Collapsible open={reportOpen} onOpenChange={setReportOpen}>
        <Card className="bg-background border-border">
          <CollapsibleTrigger asChild>
            <CardHeader className="cursor-pointer hover:bg-muted/50 transition-colors">
              <CardTitle className="text-foreground font-mono flex items-center justify-between">
                ANALYSIS REPORT
                <ChevronDown className={`w-5 h-5 transition-transform ${reportOpen ? 'rotate-180' : ''}`} />
              </CardTitle>
            </CardHeader>
          </CollapsibleTrigger>
          <CollapsibleContent>
            <CardContent>
              <div className="bg-muted/50 p-4 rounded-lg">
                <p className="text-muted-foreground font-mono leading-relaxed whitespace-pre-wrap">
                  {result.analysis_report}
                </p>
              </div>
            </CardContent>
          </CollapsibleContent>
        </Card>
      </Collapsible>

      {/* Export Button */}
      <Card className="bg-background border-border">
        <CardContent className="p-4">
          <Button 
            onClick={handleExportPDF}
            className="w-full bg-primary hover:bg-primary/90 text-primary-foreground font-mono"
          >
            <Download className="w-4 h-4 mr-2" />
            EXPORT SOVEREIGNTY REPORT
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};