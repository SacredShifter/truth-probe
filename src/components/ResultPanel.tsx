import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { DistortionFlagCard } from './DistortionFlagCard';
import { Download } from 'lucide-react';

interface DistortionFlag {
  type: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
}

interface AuditResult {
  resonance_score: number;
  distortion_flags: DistortionFlag[];
  truth_rewrite: string;
  explanation: string;
}

interface ResultPanelProps {
  result: AuditResult;
  originalText: string;
}

const getResonanceColor = (score: number) => {
  if (score >= 0.8) return 'text-green-400';
  if (score >= 0.6) return 'text-yellow-400';
  if (score >= 0.4) return 'text-orange-400';
  return 'text-red-400';
};

const getResonanceLabel = (score: number) => {
  if (score >= 0.9) return 'PURE TRUTH RESONANCE';
  if (score >= 0.7) return 'HIGH TRUTH RESONANCE';
  if (score >= 0.5) return 'MIXED SIGNALS DETECTED';
  if (score >= 0.3) return 'DISTORTION PRESENT';
  return 'HIGH DISTORTION';
};

export const ResultPanel = ({ result, originalText }: ResultPanelProps) => {
  const handleExportPDF = () => {
    const content = `
VALEION AUDIT REPORT
====================================

RESONANCE SCORE: ${result.resonance_score.toFixed(2)} - ${getResonanceLabel(result.resonance_score)}

ORIGINAL TEXT:
${originalText}

DISTORTION FLAGS:
${result.distortion_flags.map(flag => 
  `â€¢ ${flag.type} (${flag.severity.toUpperCase()}): ${flag.description}`
).join('\n')}

TRUTH REWRITE:
${result.truth_rewrite}

ANALYSIS EXPLANATION:
${result.explanation}

====================================
Generated by Valeion Sovereignty Engine
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `valeion-audit-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6">
      {/* Resonance Score */}
      <Card className="bg-background border-border">
        <CardHeader className="text-center">
          <CardTitle className="text-foreground font-mono">RESONANCE ANALYSIS</CardTitle>
        </CardHeader>
        <CardContent className="text-center">
          <div className={`text-6xl font-mono font-bold ${getResonanceColor(result.resonance_score)}`}>
            {result.resonance_score.toFixed(2)}
          </div>
          <div className={`text-lg font-mono mt-2 ${getResonanceColor(result.resonance_score)}`}>
            {getResonanceLabel(result.resonance_score)}
          </div>
        </CardContent>
      </Card>

      {/* Distortion Flags */}
      {result.distortion_flags.length > 0 && (
        <Card className="bg-background border-border">
          <CardHeader>
            <CardTitle className="text-foreground font-mono">DISTORTION SIGNATURES</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {result.distortion_flags.map((flag, index) => (
                <DistortionFlagCard key={index} flag={flag} />
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Truth Rewrite */}
      <Card className="bg-background border-border">
        <CardHeader>
          <CardTitle className="text-foreground font-mono">TRUTH ALIGNMENT</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-muted p-4 rounded-lg">
            <p className="text-foreground font-mono leading-relaxed whitespace-pre-wrap">
              {result.truth_rewrite}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Explanation */}
      <Card className="bg-background border-border">
        <CardHeader>
          <CardTitle className="text-foreground font-mono">ANALYSIS REPORT</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground font-mono leading-relaxed">
            {result.explanation}
          </p>
        </CardContent>
      </Card>

      {/* Export Button */}
      <Card className="bg-background border-border">
        <CardContent className="p-4">
          <Button 
            onClick={handleExportPDF}
            className="w-full bg-secondary hover:bg-secondary/90 text-secondary-foreground font-mono"
          >
            <Download className="w-4 h-4 mr-2" />
            EXPORT REPORT
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};